// Generated by CoffeeScript 1.10.0
var CONSOLE_HEIGHT, CONSOLE_WIDTH, gravity, i, len, newParticle, particles, particlesCounter, particlesDistance, particlesInteraction, pressure, screenBuffer, screenBufferIndex, simulationNextStep, totalOfParticles, viscosity, x, xParticleDistance, xSandboxAreaScan, y, yParticleDistance, ySandboxAreaScan;

CONSOLE_WIDTH = 80;

CONSOLE_HEIGHT = 24;

xSandboxAreaScan = 0;

ySandboxAreaScan = 0;

particles = [];

xParticleDistance = 0.0;

yParticleDistance = 0.0;

particlesInteraction = 0.0;

particlesDistance = 0.0;

x = 0;

y = 0;

screenBufferIndex = 0;

totalOfParticles = 0;

gravity = 1;

pressure = 4;

viscosity = 7;

screenBuffer = [];

document.getElementById("simulationOutput").innerHTML = "";

particlesCounter = 0;

for (i = 0, len = column2.length; i < len; i++) {
  x = column2[i];
  if (x === '\n') {
    ySandboxAreaScan += 2;
    xSandboxAreaScan = -1;
  } else if (x !== ' ') {
    newParticle = {};
    newParticle.density = 0.0;
    newParticle.xForce = 0.0;
    newParticle.xVelocity = 0.0;
    newParticle.yForce = 0.0;
    newParticle.yVelocity = 0.0;
    newParticle.wallflag = 0;
    particles.push(newParticle);
    newParticle = {};
    newParticle.density = 0.0;
    newParticle.xForce = 0.0;
    newParticle.xVelocity = 0.0;
    newParticle.yForce = 0.0;
    newParticle.yVelocity = 0.0;
    newParticle.wallflag = 0;
    particles.push(newParticle);
    if (x === "#") {
      particles[particlesCounter].wallflag = particles[particlesCounter + 1].wallflag = 1;
    }
    particles[particlesCounter].xPos = xSandboxAreaScan;
    particles[particlesCounter].yPos = ySandboxAreaScan;
    particles[particlesCounter + 1].xPos = xSandboxAreaScan;
    particles[particlesCounter + 1].yPos = ySandboxAreaScan + 1;
    particlesCounter += 2;
    totalOfParticles = particlesCounter;
  }
  xSandboxAreaScan += 1;
}

simulationNextStep = function() {
  debugger;
  var j, k, l, m, n, o, p, particlesCursor, particlesCursor2, ref, ref1, ref2, ref3, ref4, ref5, ref6;
  for (particlesCursor = j = 0, ref = totalOfParticles; 0 <= ref ? j < ref : j > ref; particlesCursor = 0 <= ref ? ++j : --j) {
    particles[particlesCursor].density = particles[particlesCursor].wallflag * 9;
    for (particlesCursor2 = k = 0, ref1 = totalOfParticles; 0 <= ref1 ? k < ref1 : k > ref1; particlesCursor2 = 0 <= ref1 ? ++k : --k) {
      xParticleDistance = particles[particlesCursor].xPos - particles[particlesCursor2].xPos;
      yParticleDistance = particles[particlesCursor].yPos - particles[particlesCursor2].yPos;
      particlesDistance = Math.sqrt(Math.pow(xParticleDistance, 2.0) + Math.pow(yParticleDistance, 2.0));
      particlesInteraction = particlesDistance / 2.0 - 1.0;
      if (Math.floor(1.0 - particlesInteraction) > 0) {
        particles[particlesCursor].density += particlesInteraction * particlesInteraction;
      }
    }
  }
  for (particlesCursor = l = 0, ref2 = totalOfParticles; 0 <= ref2 ? l < ref2 : l > ref2; particlesCursor = 0 <= ref2 ? ++l : --l) {
    particles[particlesCursor].yForce = gravity;
    particles[particlesCursor].xForce = 0;
    for (particlesCursor2 = m = 0, ref3 = totalOfParticles; 0 <= ref3 ? m < ref3 : m > ref3; particlesCursor2 = 0 <= ref3 ? ++m : --m) {
      xParticleDistance = particles[particlesCursor].xPos - particles[particlesCursor2].xPos;
      yParticleDistance = particles[particlesCursor].yPos - particles[particlesCursor2].yPos;
      particlesDistance = Math.sqrt(Math.pow(xParticleDistance, 2.0) + Math.pow(yParticleDistance, 2.0));
      particlesInteraction = particlesDistance / 2.0 - 1.0;
      if (Math.floor(1.0 - particlesInteraction) > 0) {
        particles[particlesCursor].xForce += particlesInteraction * (xParticleDistance * (3 - particles[particlesCursor].density - particles[particlesCursor2].density) * pressure + particles[particlesCursor].xVelocity * viscosity - particles[particlesCursor2].xVelocity * viscosity) / particles[particlesCursor].density;
        particles[particlesCursor].yForce += particlesInteraction * (yParticleDistance * (3 - particles[particlesCursor].density - particles[particlesCursor2].density) * pressure + particles[particlesCursor].yVelocity * viscosity - particles[particlesCursor2].yVelocity * viscosity) / particles[particlesCursor].density;
      }
    }
  }
  for (screenBufferIndex = n = 0, ref4 = CONSOLE_WIDTH * CONSOLE_HEIGHT; 0 <= ref4 ? n < ref4 : n > ref4; screenBufferIndex = 0 <= ref4 ? ++n : --n) {
    screenBuffer[screenBufferIndex] = 0;
  }
  debugger;
  for (particlesCursor = o = 0, ref5 = totalOfParticles; 0 <= ref5 ? o < ref5 : o > ref5; particlesCursor = 0 <= ref5 ? ++o : --o) {
    if (!particles[particlesCursor].wallflag) {
      if (Math.sqrt(Math.pow(particles[particlesCursor].xForce, 2.0) + Math.pow(particles[particlesCursor].yForce, 2.0)) < 4.2) {
        particles[particlesCursor].xVelocity += particles[particlesCursor].xForce / 10;
        particles[particlesCursor].yVelocity += particles[particlesCursor].yForce / 10;
      } else {
        particles[particlesCursor].xVelocity += particles[particlesCursor].xForce / 11;
        particles[particlesCursor].yVelocity += particles[particlesCursor].yForce / 11;
      }
      particles[particlesCursor].xPos += particles[particlesCursor].xVelocity;
      particles[particlesCursor].yPos += particles[particlesCursor].yVelocity;
    }
    x = Math.round(particles[particlesCursor].xPos);
    y = Math.round(particles[particlesCursor].yPos / 2);
    screenBufferIndex = Math.round(x + CONSOLE_WIDTH * y);
    if (y >= 0 && y < CONSOLE_HEIGHT - 1 && x >= 0 && x < CONSOLE_WIDTH - 1) {
      screenBuffer[screenBufferIndex] |= 8;
      screenBuffer[screenBufferIndex + 1] |= 4;
      screenBuffer[screenBufferIndex + CONSOLE_WIDTH] |= 2;
      screenBuffer[screenBufferIndex + CONSOLE_WIDTH + 1] |= 1;
    }
  }
  debugger;
  for (screenBufferIndex = p = 0, ref6 = CONSOLE_WIDTH * CONSOLE_HEIGHT; 0 <= ref6 ? p < ref6 : p > ref6; screenBufferIndex = 0 <= ref6 ? ++p : --p) {
    if (screenBufferIndex % CONSOLE_WIDTH === CONSOLE_WIDTH - 1) {
      screenBuffer[screenBufferIndex] = '<br>';
    } else {
      screenBuffer[screenBufferIndex] = " '`-.|//,\\|\\_\\/#"[screenBuffer[screenBufferIndex]];
    }
  }
  document.getElementById("simulationOutput").innerHTML = screenBuffer.join("").replace(/ /g, "&nbsp;");
  debugger;
  return window.requestAnimationFrame(simulationNextStep);
};

//# sourceMappingURL=asciiFluidSimulation.js.map
